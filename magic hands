import processing.sound.*;
import processing.serial.*;

SoundFile file;
SoundFile flowerSound;
SoundFile soundEffect;
Serial myPort;

int NUM_OF_VALUES_FROM_ARDUINO = 8;
int[] arduinoValues = new int[NUM_OF_VALUES_FROM_ARDUINO];

int buttonStart = 0;
int buttonNext = 0;

boolean gameStarted = false;
boolean levelTwoStarted = false;

PFont myfont;
PFont descriptionFont;

String gameTitle = "MAGIC HANDS";
String gameDescription = "Press the green button to begin the challenge.";

PImage photo;
PImage level2Image;
PImage sunImage;
PGraphics rightCanvas;

boolean sunDrawn = false;

int secondsLeft;
int startTime;
boolean timerFinished = false;

long pressMillis;

int forceValue = 0;
boolean triangleVisible = false;
float triangleX = -150;
float trianglexSpeed = 1;

int forceValue2 = 0;
boolean squareVisible = false;
float squareX = -150;
float squarexSpeed = 1;

int forceValue3 = 0;
boolean circleVisible = false;
float circleX = -150;
float circlexSpeed = 1;

int forceValue4 = 0;
int triangleColorIndex = 0;

int forceValue5 = 0;
int squareColorIndex = 0;

int forceValue6 = 0;
int circleColorIndex = 0;

color[] triangleColors = {color(255, 255, 255), color(255, 255, 0), color(255, 0, 0), color(0, 0, 255)};
color[] squareColors = {color(255, 255, 255), color(0, 255, 0), color(255, 165, 0), color(255, 255, 0)};
color[] circleColors = {color(255, 255, 255), color(255, 0, 0), color(0, 255, 0), color(0, 0, 255)};

boolean triangleColorCycling = false;
boolean squareColorCycling = false;
boolean circleColorCycling = false;

float[] xs = new float[160];
float[] ys = new float[160];
float[] sizes = new float[160];
color[] colors = new color[160];
float[] xspeed = new float[160];
float[] yspeed = new float[160];

float minSize = 10;
float maxSize = 50;
float sizeIncrement = 5;

color[] timeOfDayColors = {color(255, 165, 0), color(0, 0, 128), color(135, 206, 235)};

int currentBackgroundColorIndex = 0;
boolean colorChanged = false;

color[] petalColors = {
  color(255, 223, 0),
  color(0, 255, 255),
  color(0, 128, 0),
  color(255, 140, 0),
  color(75, 0, 130),
  color(255, 105, 180)
};

int currentPetalColorIndex = 0;
boolean petalColorChanged = false;

boolean soundPlayed = false;

boolean effectPlayed= false; 

int soundStartMillis = -1;
int gameState = 0;

void setup() {
  size(800, 600);

  file = new SoundFile(this, "Yoshi's.mp3");
  file.play();

  flowerSound = new SoundFile(this, "Yayyy! Sound Effect.mp3");
  soundEffect = new SoundFile(this, "Camion.mp3");

  myfont = createFont("Wonderbar-pALD.ttf", 60);
  descriptionFont = createFont("SimpleBold-MVaZe.otf", 20);
  photo = loadImage("level1.png");
  level2Image = loadImage("level2.png");
  sunImage = loadImage ("sun.png");

  rightCanvas = createGraphics(width / 2, height);

  for (int i = 0; i < 160; i++) {
    xs[i] = random(rightCanvas.width);
    ys[i] = random(rightCanvas.height / 2, rightCanvas.height);
    sizes[i] = random(15, 40);
    xspeed[i] = random(-5, 5);
    yspeed[i] = random(-3, 3);
  }

  startTime = millis();

  printArray(Serial.list());
  myPort = new Serial(this, "/dev/cu.usbmodem14201", 9600);
}

void draw() {
  background(0);
  
  getSerialData();

  if (gameState == 0) {
    showMenu();
  } else if (gameState == 1) {
    startGame();
  } else if (gameState == 2) {
    level2();
  }
}

void showMenu() {
  buttonStart = arduinoValues[6];

  for (int y = 0; y < height; y++) {
    color c = lerpColor(color(163, 74, 174), color(127, 221, 234), map(y, 0, height, 0, 1));
    stroke(c);
    line(0, y, width, y);
  }

  textFont(myfont);
  fill(255, 223, 0);
  textSize(80);
  text(gameTitle, width / 5, height / 2);

  textFont(descriptionFont);
  fill(255);
  textSize(20);
  text(gameDescription, width / 2, height / 2 + 100);

  if (buttonStart == 1) {
    gameState = 1;
  }
}

void startGame() {
  
  forceValue = arduinoValues[0];
  forceValue2 = arduinoValues[1];
  forceValue3 = arduinoValues[2];
  forceValue4 = arduinoValues[3];
  forceValue5 = arduinoValues[4];
  forceValue6 = arduinoValues[5];
  buttonNext = arduinoValues[7];
    
  image(photo, 0, 0, width / 2, height);

  rightCanvas.beginDraw();
  rightCanvas.background(251, 246, 242);

  rightCanvas.fill(6, 5, 6);
  rightCanvas.textFont(descriptionFont);
  rightCanvas.textSize(25);
  rightCanvas.textAlign(CENTER, TOP);
  rightCanvas.text("Draw here", rightCanvas.width / 2, 50);
  updateTimer();

  displayTimer();

  displayShapes();
 
  moveShapes();

  rightCanvas.endDraw();
  
  image(rightCanvas, width / 2, 0);

  buttonNext = arduinoValues[7];
  if (buttonNext == 1) {
    gameState = 2;
  }
}

void updateTimer() {
  int elapsedTime = millis() - startTime;

  if (elapsedTime >= 120000 && !timerFinished) {
    timerFinished = true;
    println("2 minutes is up!");
  }
}

void displayTimer() {
  rightCanvas.fill(0);
  rightCanvas.textSize(24);
  rightCanvas.textAlign(RIGHT, TOP);
  rightCanvas.text("Time left: " + (timerFinished ? 0 : (120000 - (millis() - startTime)) / 1000) + "s", rightCanvas.width - 20, 20);
}

void moveShapes() {
  if (forceValue >= 500 && !triangleVisible) {
    triangleVisible = true;
    triangleX = 0;
    trianglexSpeed = 1;
    pressMillis = millis();
  }

  if (triangleVisible && trianglexSpeed != 0) {
    triangleX += trianglexSpeed;
  }

  if (forceValue >= 500 && millis() - pressMillis > 1000) {
    if (triangleVisible) {
      trianglexSpeed = 0;
      pressMillis = millis();
    }
  }

  if (forceValue2 >= 500 && !squareVisible) {
    squareVisible = true;
    squareX = 0;
    squarexSpeed = 1;
    pressMillis = millis();
  }

  if (squareVisible && squarexSpeed != 0) {
    squareX += squarexSpeed;
  }

  if (forceValue2 >= 500 && millis() - pressMillis > 1000) {
    if (squareVisible) {
      squarexSpeed = 0;
      pressMillis = millis();
    }
  }

  if (forceValue3 >= 500 && !circleVisible) {
    circleVisible = true;
    circleX = 0;
    circlexSpeed = 1;
    pressMillis = millis();
  }

  if (circleVisible && circlexSpeed != 0) {
    circleX += circlexSpeed;
  }

  if (forceValue3 >= 500 && millis() - pressMillis > 1000) {
    if (circleVisible) {
      circlexSpeed = 0;
      pressMillis = millis();
    }
  }

  if (trianglexSpeed == 0 && squarexSpeed == 0 && circlexSpeed == 0 && !soundPlayed) {
    soundEffect.play();
    soundPlayed = true;
  }
}

void displayShapes() {
  if (triangleVisible) {
    if (forceValue4 >= 500) {
      triangleColorIndex = (triangleColorIndex + 1) % triangleColors.length;
    }
    rightCanvas.fill(triangleColors[triangleColorIndex]);
    rightCanvas.triangle(triangleX + 50, 300, triangleX + 100, 250, triangleX + 150, 300);
  }

  if (squareVisible) {
    if (forceValue5 >= 500) {
      squareColorIndex = (squareColorIndex + 1) % squareColors.length;
    }
    rightCanvas.fill(squareColors[squareColorIndex]);
    rightCanvas.rect(squareX + 100, 350, 50, 50);
  }

  if (circleVisible) {
    if (forceValue6 >= 500) {
      circleColorIndex = (circleColorIndex + 1) % circleColors.length;
    }
    rightCanvas.fill(circleColors[circleColorIndex]);
    rightCanvas.ellipse(circleX + 150, 400, 50, 50);
  }
}

void level2() {
  if (!sunDrawn) {
    image(sunImage, 0, 0, width, height);
    sunDrawn = true;
  }
  rightCanvas.beginDraw();
  rightCanvas.background(timeOfDayColors[currentBackgroundColorIndex]);

  rightCanvas.fill(255);
  rightCanvas.textFont(descriptionFont);
  rightCanvas.textSize(20);
  rightCanvas.textAlign(CENTER, TOP);
  rightCanvas.text("Level 2", rightCanvas.width / 2, 50);
  rightCanvas.endDraw();
  
  image(rightCanvas, width / 2, 0);
}

void getSerialData() {
  while (myPort.available() > 0) {
    String arduinoData = myPort.readStringUntil('\n');
    if (arduinoData != null) {
      arduinoData = trim(arduinoData);
      String[] values = split(arduinoData, ',');
      for (int i = 0; i < min(values.length, arduinoValues.length); i++) {
        arduinoValues[i] = int(values[i]);
      }
    }
  }
}

